/*
 *  @file  : IcdCrcCalcToolDlg.cpp
 *  @author: luteng
 *  @date  : 2015-05-27 15:24:29.977
 *  @note  : Generated by SlxTemplates
 */

// IcdCrcCalcToolDlg.cpp : implementation file
//

#include "stdafx.h"
#include <Shlwapi.h>
#include "IcdCrcCalcTool.h"
#include "IcdCrcCalcToolDlg.h"
#include <slxcommon.h>
#include "IcdParser.h"
#include "tool/InputBox.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

enum
{
    LH_ID,                          // 标头，id
    LH_OLDFILENAME,                 // 标头，原文件名
    LH_NEWFILENAME,                 // 标头，新文件名
    LH_CRC,                         // 标头，crc
    LH_CUSTOMFUNCTION,              // 标头，选配功能
};

#define IDC_BASE    1120

enum
{
    IDC_SHOWFILE = IDC_BASE,
    IDC_IMPORT,
    IDC_EDIT_CUSTOMFUCTION,
    IDC_REVERT,
};

static const TCHAR *szMenuNames[] =
{
    TEXT("在资源管理器中浏览文件(&R)\tCtrl+R"),
    TEXT("导入icd文件(&I)\tCtrl+I"),
    TEXT("编辑选配功能(&C)\tCtrl+E"),
    TEXT("恢复原文件名(&O)\tCtrl+O"),
};

enum
{
    WM_GETICDINFOFROMTHREAD = WM_USER + 112,
    WM_SETICDINFOFROMTHREAD,
    WM_REFRESHICDINFO,
};

/////////////////////////////////////////////////////////////////////////////
// CIcdCrcCalcToolDlg dialog

CIcdCrcCalcToolDlg::CIcdCrcCalcToolDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CIcdCrcCalcToolDlg::IDD, pParent)
    , m_hDealThread(NULL)
    , m_hStopEvent(NULL)
    , m_hSemphore(NULL)
    , m_hAccel(NULL)
{
	//{{AFX_DATA_INIT(CIcdCrcCalcToolDlg)
		// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
	// Note that LoadIcon does not require a subsequent DestroyIcon in Win32
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
    m_hStopEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
    m_hSemphore = CreateSemaphore(NULL, 0, MAXLONG, NULL);
}

CIcdCrcCalcToolDlg::~CIcdCrcCalcToolDlg()
{
    StopDealThread();
    CloseHandle(m_hStopEvent);
    CloseHandle(m_hSemphore);

    if (m_hAccel != NULL)
    {
        DestroyAcceleratorTable(m_hAccel);
    }
}

void CIcdCrcCalcToolDlg::DoDataExchange(CDataExchange* pDX)
{
    CDialog::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CIcdCrcCalcToolDlg)
    // NOTE: the ClassWizard will add DDX and DDV calls here
    //}}AFX_DATA_MAP
    DDX_Control(pDX, IDC_LIST, m_listFiles);
}

BEGIN_MESSAGE_MAP(CIcdCrcCalcToolDlg, CDialog)
	//{{AFX_MSG_MAP(CIcdCrcCalcToolDlg)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	//}}AFX_MSG_MAP
ON_NOTIFY(NM_RCLICK, IDC_LIST, &CIcdCrcCalcToolDlg::OnNMRClickList)
ON_WM_CLOSE()
ON_NOTIFY(NM_DBLCLK, IDC_LIST, &CIcdCrcCalcToolDlg::OnNMDblclkList)
ON_WM_SIZE()
ON_WM_DROPFILES()
ON_BN_CLICKED(IDC_BTNIMPORT, &CIcdCrcCalcToolDlg::OnBnClickedBtnimport)
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CIcdCrcCalcToolDlg message handlers

BOOL CIcdCrcCalcToolDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon
	
	// TODO: Add extra initialization here
    m_listFiles.SetExtendedStyle(LVS_EX_FULLROWSELECT);

    m_listFiles.InsertColumn(LH_ID,               TEXT("序号"), 0, 60);
    m_listFiles.InsertColumn(LH_OLDFILENAME,      TEXT("待处理文件"), 0, 150);
    m_listFiles.InsertColumn(LH_NEWFILENAME,      TEXT("处理后文件名"), 0, 150);
    m_listFiles.InsertColumn(LH_CRC,              TEXT("crc"), 0, 100);
    m_listFiles.InsertColumn(LH_CUSTOMFUNCTION,   TEXT("选配功能"), 0, 150);

    ACCEL accel[] =
    {
        { FVIRTKEY | FCONTROL, 'R',     IDC_SHOWFILE            },
        { FVIRTKEY | FCONTROL, 'I',     IDC_IMPORT              },
        { FVIRTKEY | FCONTROL, 'C',     IDC_EDIT_CUSTOMFUCTION  },
        { FVIRTKEY | FCONTROL, 'O',     IDC_REVERT              },
    };

    m_hAccel = CreateAcceleratorTable(accel, RTL_NUMBER_OF(accel));

    StartDealThread();
	
	return TRUE;  // return TRUE  unless you set the focus to a control
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CIcdCrcCalcToolDlg::OnPaint() 
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

// The system calls this to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CIcdCrcCalcToolDlg::OnQueryDragIcon()
{
	return (HCURSOR) m_hIcon;
}

void CIcdCrcCalcToolDlg::OnNMRClickList(NMHDR *pNMHDR, LRESULT *pResult)
{
    LPNMITEMACTIVATE pNMItemActivate = reinterpret_cast<LPNMITEMACTIVATE>(pNMHDR);
    // TODO: 在此添加控件通知处理程序代码
    *pResult = 0;

    HMENU hPopMenu = CreatePopupMenu();
    int nSelIndex = m_listFiles.GetSelectionMark();

    if (hPopMenu != NULL)
    {
        POINT pt;

        GetCursorPos(&pt);

        AppendMenu(hPopMenu, MF_STRING, IDC_SHOWFILE, szMenuNames[IDC_SHOWFILE - IDC_BASE]);
        AppendMenu(hPopMenu, MF_STRING, IDC_IMPORT, szMenuNames[IDC_IMPORT - IDC_BASE]);
        AppendMenu(hPopMenu, MF_STRING, IDC_EDIT_CUSTOMFUCTION, szMenuNames[IDC_EDIT_CUSTOMFUCTION - IDC_BASE]);
        AppendMenu(hPopMenu, MF_STRING, IDC_REVERT, szMenuNames[IDC_REVERT - IDC_BASE]);

        if (nSelIndex == -1)
        {
            EnableMenuItem(hPopMenu, IDC_SHOWFILE, MF_GRAYED | MF_BYCOMMAND);
            EnableMenuItem(hPopMenu, IDC_EDIT_CUSTOMFUCTION, MF_GRAYED | MF_BYCOMMAND);
            EnableMenuItem(hPopMenu, IDC_REVERT, MF_GRAYED | MF_BYCOMMAND);
        }
        else if (m_vectorIcds[nSelIndex].nStatus != IFS_SUCCESS)
        {
            EnableMenuItem(hPopMenu, IDC_EDIT_CUSTOMFUCTION, MF_GRAYED | MF_BYCOMMAND);
            EnableMenuItem(hPopMenu, IDC_REVERT, MF_GRAYED | MF_BYCOMMAND);
        }

        SetMenuDefaultItem(hPopMenu, IDC_SHOWFILE, MF_BYCOMMAND);

        TrackPopupMenu(hPopMenu, TPM_RIGHTBUTTON, pt.x, pt.y, 0, GetSafeHwnd(), NULL);
        DestroyMenu(hPopMenu);
    }
}

BOOL CIcdCrcCalcToolDlg::OnCommand(WPARAM wParam, LPARAM lParam)
{
    // TODO: 在此添加专用代码和/或调用基类
    switch (LOWORD(wParam))
    {
    case IDC_SHOWFILE:
        ShowFile(m_listFiles.GetSelectionMark());
        break;

    case IDC_IMPORT:
        OnBnClickedBtnimport();
        break;

    case IDC_EDIT_CUSTOMFUCTION:{
        int nSelIndex = m_listFiles.GetSelectionMark();
        IcdInfo &icdInfo = m_vectorIcds.at(nSelIndex);
        TCHAR szCustomFunction[MAX_PATH];

        lstrcpyn(szCustomFunction, icdInfo.szCustomFunction, RTL_NUMBER_OF(szCustomFunction));

        if (InputBox(
            GetModuleHandle(NULL),
            GetSafeHwnd(),
            m_hIcon,
            L"请输入选配功能：",
            FALSE,
            FALSE,
            128,
            szCustomFunction,
            RTL_NUMBER_OF(szCustomFunction),
            NULL,
            NULL))
        {
            CString strNewFilePath = CalcNewFilePath(icdInfo.szFilePath, icdInfo.szCrc, icdInfo.szHeaderVersion, icdInfo.szIedType, szCustomFunction);

            if (MoveFile(icdInfo.szNewFilePath, strNewFilePath))
            {
                lstrcpyn(icdInfo.szNewFilePath, strNewFilePath, RTL_NUMBER_OF(icdInfo.szNewFilePath));
                lstrcpyn(icdInfo.szCustomFunction, szCustomFunction, RTL_NUMBER_OF(icdInfo.szCustomFunction));
                PostMessage(WM_REFRESHICDINFO, nSelIndex);
            }
            else
            {
                MessageBoxFormat(GetSafeHwnd(), NULL, MB_ICONERROR, TEXT("编辑选配功能失败：%lu"), GetLastError());
            }

        }

        break;}

    case IDC_REVERT:
        if (IDYES == MessageBox(TEXT("要恢复文件原名吗？"), TEXT("请确认"), MB_ICONQUESTION | MB_YESNOCANCEL | MB_DEFBUTTON3))
        {
            int nSelIndex = m_listFiles.GetSelectionMark();
            IcdInfo &icdInfo = m_vectorIcds.at(nSelIndex);

            if (MoveFile(icdInfo.szNewFilePath, icdInfo.szFilePath))
            {
                icdInfo.nStatus = IFS_FAILED;
                lstrcpyn(icdInfo.szErrorMessage, TEXT("已经恢复原文件名"), RTL_NUMBER_OF(icdInfo.szErrorMessage));

                PostMessage(WM_REFRESHICDINFO, nSelIndex);
            }
            else
            {
                MessageBoxFormat(GetSafeHwnd(), NULL, MB_ICONERROR, TEXT("恢复原文件名失败：%lu"), GetLastError());
            }
        }
        break;

    default:
        break;
    }

    return CDialog::OnCommand(wParam, lParam);
}

void CIcdCrcCalcToolDlg::StartDealThread()
{
    if (m_hDealThread == NULL)
    {
        m_hDealThread = CreateThread(NULL, 0, DealProc, this, 0, NULL);
    }
}

void CIcdCrcCalcToolDlg::StopDealThread()
{
    SetEvent(m_hStopEvent);

    if (m_hDealThread != NULL)
    {
        if (WAIT_TIMEOUT == WaitForSingleObject(m_hDealThread, 3341))
        {
            TerminateThread(m_hDealThread, 0);
        }

        CloseHandle(m_hDealThread);
        m_hDealThread = NULL;
    }
}

DWORD CALLBACK CIcdCrcCalcToolDlg::DealProc(LPVOID lpParam)
{
    CIcdCrcCalcToolDlg *pThis = (CIcdCrcCalcToolDlg *)lpParam;
    HWND hwndDlg = pThis->GetSafeHwnd();
    HANDLE hObjects[] = {pThis->m_hStopEvent, pThis->m_hSemphore};
    int nRowIndex = 0;

    while (TRUE)
    {
        DWORD dwWaitResult = WaitForMultipleObjects(RTL_NUMBER_OF(hObjects), hObjects, FALSE, INFINITE);

        if (dwWaitResult == WAIT_OBJECT_0 + 1 && ::IsWindow(hwndDlg))
        {
            IcdInfo icdInfo;

            if (::SendMessage(hwndDlg, WM_GETICDINFOFROMTHREAD, nRowIndex, (LPARAM)&icdInfo))
            {
                CIcdParser parser(icdInfo.szFilePath);

                if (!parser.Parse())
                {
                    icdInfo.nStatus = IFS_FAILED;
                    lstrcpyn(icdInfo.szErrorMessage, parser.GetErrorMessage(), RTL_NUMBER_OF(icdInfo.szErrorMessage));
                }
                else
                {
                    lstrcpyn(icdInfo.szHeaderVersion, parser.GetHeaderVersion(), RTL_NUMBER_OF(icdInfo.szHeaderVersion));
                    lstrcpyn(icdInfo.szIedType, parser.GetIedType(), RTL_NUMBER_OF(icdInfo.szIedType));
                    lstrcpyn(icdInfo.szCrc, parser.GetCrc(), RTL_NUMBER_OF(icdInfo.szCrc));
                    lstrcpyn(icdInfo.szNewFilePath, CalcNewFilePath(icdInfo.szFilePath, icdInfo.szCrc, icdInfo.szHeaderVersion, icdInfo.szIedType), RTL_NUMBER_OF(icdInfo.szNewFilePath));

                    if (MoveFile(icdInfo.szFilePath, icdInfo.szNewFilePath))
                    {
                        icdInfo.nStatus = IFS_SUCCESS;
                    }
                    else
                    {
                        icdInfo.nStatus = IFS_FAILED;
                        icdInfo.szNewFilePath[0] = TEXT('\0');
                        wnsprintf(icdInfo.szErrorMessage, RTL_NUMBER_OF(icdInfo.szErrorMessage), TEXT("重命名文件失败：%lu"), GetLastError());
                    }
                }

                ::SendMessage(hwndDlg, WM_SETICDINFOFROMTHREAD, nRowIndex, (LPARAM)&icdInfo);
            }

            ++nRowIndex;
        }
        else
        {
            break;
        }
    }

    return 0;
}

void CIcdCrcCalcToolDlg::OnClose()
{
    // TODO: 在此添加消息处理程序代码和/或调用默认值
    StopDealThread();

    CDialog::OnClose();
}

void CIcdCrcCalcToolDlg::OnNMDblclkList(NMHDR *pNMHDR, LRESULT *pResult)
{
    LPNMITEMACTIVATE pNMItemActivate = reinterpret_cast<LPNMITEMACTIVATE>(pNMHDR);
    // TODO: 在此添加控件通知处理程序代码
    *pResult = 0;

    ShowFile(m_listFiles.GetSelectionMark());
}

void CIcdCrcCalcToolDlg::ShowFile(int nItemIndex)
{
    if (nItemIndex < 0)
    {
        return;
    }

    const IcdInfo &icdInfo = m_vectorIcds.at(nItemIndex);
    LPCTSTR lpPath = icdInfo.szNewFilePath;

    if (!PathFileExists(lpPath))
    {
        lpPath = icdInfo.szFilePath;
    }

    if (!PathFileExists(lpPath))
    {
        MessageBox(TEXT("文件不存在，无法定位"), NULL, MB_ICONERROR);
    }
    else
    {
        BrowseForFile(lpPath);
    }
}

void CIcdCrcCalcToolDlg::OnSize(UINT nType, int cx, int cy)
{
    CDialog::OnSize(nType, cx, cy);

//     if (::IsWindow(::GetDlgItem(GetSafeHwnd(), IDC_LIST)))
//     {
//         CRect rect;
// 
//         GetClientRect(&rect);
//         InflateRect(&rect, -10, -10);
// 
//         GetDlgItem(IDC_LIST)->MoveWindow(&rect, TRUE);
//     }
}

void CIcdCrcCalcToolDlg::DoImportFiles(const CStringArray &strPaths)
{
    m_vectorIcds.reserve(m_vectorIcds.size() + strPaths.GetCount());

    for (int i = 0; i < strPaths.GetCount(); ++i)
    {
        const CString &strPath = strPaths.GetAt(i);
        IcdInfo icdInfo = {TEXT("")};

        lstrcpyn(icdInfo.szFilePath, strPath, RTL_NUMBER_OF(icdInfo.szFilePath));
        icdInfo.nStatus = IFS_DEALING;
        m_vectorIcds.push_back(icdInfo);

        int nRowCount = m_listFiles.GetItemCount();
        CString strIndex;

        strIndex.Format(TEXT("%lu"), nRowCount + 1);
        m_listFiles.InsertItem(nRowCount, strIndex);
        m_listFiles.SetItemText(nRowCount, LH_OLDFILENAME, PathFindFileName(strPath));
        m_listFiles.EnsureVisible(nRowCount, FALSE);

        ReleaseSemaphore(m_hSemphore, 1, NULL);
    }
}

LRESULT CIcdCrcCalcToolDlg::WindowProc(UINT message, WPARAM wParam, LPARAM lParam)
{
    // TODO: 在此添加专用代码和/或调用基类
    switch (message)
    {
    case WM_GETICDINFOFROMTHREAD:
        *(IcdInfo *)lParam = m_vectorIcds.at(wParam);
        return TRUE;

    case WM_SETICDINFOFROMTHREAD:{
        int nRowIndex = (int)wParam;
        IcdInfo *pIcdInfo = (IcdInfo *)lParam;
        IcdInfo &icdInfo = m_vectorIcds.at(nRowIndex);

        m_vectorIcds[nRowIndex] = *(IcdInfo *)lParam;

        PostMessage(WM_REFRESHICDINFO, wParam);

        break;}

    case WM_REFRESHICDINFO:{
        int nRowIndex = (int)wParam;
        IcdInfo &icdInfo = m_vectorIcds.at(nRowIndex);

        m_listFiles.SetItemText(nRowIndex, LH_CUSTOMFUNCTION, icdInfo.szCustomFunction);
        m_listFiles.SetItemText(nRowIndex, LH_CRC, icdInfo.szCrc);

        switch (icdInfo.nStatus)
        {
        case IFS_DEALING:
            m_listFiles.SetItemText(nRowIndex, LH_NEWFILENAME, TEXT("正在处理..."));
            break;

        case IFS_SUCCESS:
            m_listFiles.SetItemText(nRowIndex, LH_NEWFILENAME, PathFindFileName(icdInfo.szNewFilePath));
            break;

        case IFS_FAILED:
            m_listFiles.SetItemText(nRowIndex, LH_NEWFILENAME, CString(TEXT("错误：")) + icdInfo.szErrorMessage);
            break;

        default:
            break;
        }

        break;}

    default:
        break;
    }

    return CDialog::WindowProc(message, wParam, lParam);
}

void CIcdCrcCalcToolDlg::OnDropFiles(HDROP hDropInfo)
{
    // TODO: 在此添加消息处理程序代码和/或调用默认值
    TCHAR szPath[MAX_PATH] = TEXT("");
    CStringArray strPaths;
    int nIndex = 0;

    while (DragQueryFile(hDropInfo, nIndex++, szPath, RTL_NUMBER_OF(szPath)) > 0)
    {
        DWORD dwAttribute = GetFileAttributes(szPath);

        if (dwAttribute == INVALID_FILE_ATTRIBUTES)
        {
        }
        else if ((dwAttribute & FILE_ATTRIBUTE_DIRECTORY) != 0)
        {
            MessageBox(TEXT("不支持导入文件夹。"), NULL, MB_ICONERROR);
            strPaths.RemoveAll();
            break;
        }
        else if (lstrcmpi(PathFindExtension(szPath), TEXT(".icd")) != 0)
        {
            MessageBoxFormat(GetSafeHwnd(), NULL, MB_ICONERROR, TEXT("检测到不支持的文件类型：%s"), PathFindExtension(szPath));
            strPaths.RemoveAll();
            break;
        }
        else
        {
            strPaths.Add(szPath);
        }
    }

    DragFinish(hDropInfo);

    if (!strPaths.IsEmpty())
    {
        DoImportFiles(strPaths);
    }

    CDialog::OnDropFiles(hDropInfo);
}

CString CIcdCrcCalcToolDlg::CalcNewFilePath(LPCTSTR lpOldFilePath, LPCTSTR lpCrc, LPCTSTR lpHeaderVersion /*= TEXT("")*/, LPCTSTR lpIedType /*= TEXT("")*/, LPCTSTR lpCustomFunction /*= TEXT("")*/)
{
    TCHAR szOldFilePath[MAX_PATH];
    TCHAR szNewFilePath[MAX_PATH];

    if (lpHeaderVersion == NULL || *lpHeaderVersion == TEXT('\0'))
    {
        lpHeaderVersion = TEXT("v1.0");
    }

    lstrcpyn(szOldFilePath, lpOldFilePath, RTL_NUMBER_OF(szOldFilePath));
    PathRemoveFileSpec(szOldFilePath);

    wnsprintf(szNewFilePath, RTL_NUMBER_OF(szNewFilePath), TEXT("%s\\%s%s-%s-%s.icd"), szOldFilePath, lpIedType, lpCustomFunction, lpHeaderVersion, lpCrc);

    return szNewFilePath;
}

BOOL CIcdCrcCalcToolDlg::PreTranslateMessage(MSG* pMsg)
{
    // TODO: 在此添加专用代码和/或调用基类
    if (m_hAccel != NULL)
    {
        if (TranslateAccelerator(GetSafeHwnd(), m_hAccel, pMsg))
        {
            return TRUE;
        }
    }

    return CDialog::PreTranslateMessage(pMsg);
}

void CIcdCrcCalcToolDlg::OnBnClickedBtnimport()
{
    // TODO: 在此添加控件通知处理程序代码
    CFileDialog fileDlg(TRUE, NULL, NULL, OFN_ALLOWMULTISELECT | OFN_EXPLORER | OFN_FILEMUSTEXIST | OFN_HIDEREADONLY, TEXT("Icd Files (*.icd)|*.icd|All Files (*.*)|*.*||"), this);

    if (fileDlg.DoModal() == IDOK)
    {
        POSITION pos = fileDlg.GetStartPosition();
        CStringArray strPaths;

        while (pos != NULL)
        {
            strPaths.Add(fileDlg.GetNextPathName(pos));
        }

        DoImportFiles(strPaths);
    }
}
